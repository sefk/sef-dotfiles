#!/bin/sh
#
# This shell script passes all its arguments to the binary inside the
# VimR.app application bundle.  If you make links to this script as view,
# gvim, etc., then it will peek at the name used to call it and set options
# appropriately.
#
# Based on a script by Wout Mertens and suggestions from Laurent Bihanic.  This
# version is the fault of Benji Fisher, 16 May 2005 (with modifications by Nico
# Weber and Bjorn Winckler, Aug 13 2007).
# First, check "All the Usual Suspects" for the location of the Vim.app bundle.
# You can short-circuit this by setting the VIMR_APP_DIR environment variable
# or by un-commenting and editing the following line:
# VIMR_APP_DIR=/Applications

if [ -z "$VIMR_APP_DIR" ]
then
	myDir="`dirname "$0"`"
	myAppDir="$myDir/../Applications"
	for i in ~/Applications ~/Applications/vim $myDir $myDir/vim $myAppDir $myAppDir/vim /Applications /Applications/vim /Applications/Utilities /Applications/Utilities/vim; do
		if [ -x "$i/VimR.app" ]; then
			VIMR_APP_DIR="$i"
			break
		fi
	done
fi
if [ -z "$VIMR_APP_DIR" ]
then
	echo "Sorry, cannot find VimR.app.  Try setting the VIMR_APP_DIR environment variable to the directory containing VimR.app."
	exit 1
fi
binary="$VIMR_APP_DIR/VimR.app/Contents/MacOS/VimR"

# Next, peek at the name used to invoke this script, and set options
# accordingly.

name="`basename "$0"`"
gui=
opts=

# GUI mode, implies forking
case "$name" in m*|g*|rm*|rg*|vimr) gui=true ;; esac

# Restricted mode
case "$name" in r*) opts="$opts -Z";; esac

# vimdiff, view, and ex mode
case "$name" in
	*vimdiff)
		opts="$opts -dO"
		;;
	*view)
		opts="$opts -R"
		;;
	*ex)
		opts="$opts -e"
		;;
esac

# Last step:  fire up vim.
# The program should fork by default when started in GUI mode, but it does
# not; we work around this when this script is invoked as "gvim" or "rgview"
# etc., but not when it is invoked as "vim -g".
if [ "$gui" ]; then
	# Note: this is a hack.  the old way was to use 
    #     exec "$binary" -g $opts ${1:+"$@"}
    # but this feels more reliable.  
    if [ ! -z "$1" ]; then
        touch ${1:+"$@"}
        open -a VimR ${1:+"$@"}
    else
	    exec "$binary" -g $opts ${1:+"$@"}
    fi
    sleep 1
    echo 'tell application "VimR" to activate' | /usr/bin/osascript
else
	exec "$binary" $opts ${1:+"$@"}
fi
